#!/usr/bin/env python
"""
Create or update the open-source version of Portal Service
"""
import argparse
import os
from subprocess import call

excluded_paths = [
    'cloudbuild.yml',
    'e2e',
    '*.feature',
    'sql-dumps',
    'zero',
    'app/assets/images/help/subject_samples_igv.png',
    'app/assets/images/help/subject_samples_show.png',
    'app/assets/images/help/variant_searches_show.png',
]

def main(args):
    os_repo_path = args.os_repo_path

    if not os.path.exists(os_repo_path):
        print('>>> The repository does not exist. Cloning...')
        call(['git', 'clone', 'git@github.com:MSSNG-ASD/portal-service.git', os_repo_path])
    else:
        if args.apply and args.reset:
            print('>>> Resetting the public repo...')
            call('cd {} && git reset --hard 2> /dev/null && git clean -fdX 2> /dev/null'.format(os_repo_path), shell=True)
        print('>>> Pulling the updates for the public repo...')
        call('cd {} && git pull 2> /dev/null'.format(os_repo_path), shell=True)

    command = [
        'rsync',
        '-crh',
        '--progress',
        '--delete',
        '--exclude=.git',  # This folder will not be deleted from the destination.
    ] + [
        '--exclude={}'.format(excluded_path)
        for excluded_path in excluded_paths
    ] + [
        '--exclude-from=.gitignore',
        '.',  # source path
        os_repo_path  # destination path
    ]

    if not args.apply:
        print('>>> NOTICE: The synchronization will be done in simulation.')
        command.insert(1, '-n')  # Force the dry-run mode.

    print('>>> Synchronizing...')
    call(command)

    for excluded_path in excluded_paths:
        relative_excluded_path = os.path.join(os_repo_path, excluded_path)
        excluded_path_removal_command = ['rm', '-rf', relative_excluded_path]
        if args.apply:
            call(excluded_path_removal_command)
            print('>>> REMOVED: {}'.format(relative_excluded_path))
        else:
            print('>>> MARKED FOR REMOVAL: {}'.format(' '.join(excluded_path_removal_command)))

    if args.apply:
        if args.auto_commit:
            call('cd {} && git add . && git commit -m "Snapshot at $(date)" 2> /dev/null'.format(os_repo_path), shell=True)
        else:
            print('>>> Now, you can go to the public repo to commit the changes manually.')

    print('>>> Done')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--apply', '-a', help='Apply the propose changes', action='store_true')
    parser.add_argument('--auto-commit', '-c', help='Auto commit', action='store_true')
    parser.add_argument('--reset', '-r', help='Reset the destination repo', action='store_true')
    parser.add_argument('os_repo_path', help='The path to the working copy of the open-source version of the portal service')

    main(parser.parse_args())